[project]
name = "learning-agent"
version = "0.1.0"
description = "A conversational CLI agent that learns from past mistakes and successes within a project context"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Johann Hartmann", email = "johann@anthropic.com"},
]
maintainers = [
    {name = "Johann Hartmann", email = "johann@anthropic.com"},
]
keywords = ["cli", "agent", "learning", "orchestration", "langgraph", "langchain", "ai", "llm", "autonomous"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Build Tools",
    "Typing :: Typed",
]

dependencies = [
    "langchain>=0.3.0",
    "langgraph>=0.2.0",
    "langmem>=0.0.29",
    "deepagents>=0.0.1",
    "langchain-sandbox>=0.0.6",
    "rich>=13.7.0",
    "typer>=0.12.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "numpy>=1.24.0",
    "faiss-cpu>=1.7.4",
    "aiofiles>=23.2.1",
    "python-dotenv>=1.0.0",
    "httpx>=0.27.0",
    "langchain-openai>=0.2.0",
    "langchain-anthropic>=0.2.0",
    "langchain-community>=0.3.0",
    "faiss-cpu>=1.7.0",
    "fastapi>=0.116.1",
    "uvicorn>=0.35.0",
    "asyncpg>=0.29.0",
    "sqlalchemy>=2.0.0",
    "pgvector>=0.2.5",
]

[project.urls]
"Homepage" = "https://github.com/johannhartmann/learning-agent"
"Repository" = "https://github.com/johannhartmann/learning-agent"
"Bug Tracker" = "https://github.com/johannhartmann/learning-agent/issues"
"Documentation" = "https://github.com/johannhartmann/learning-agent#readme"
"Changelog" = "https://github.com/johannhartmann/learning-agent/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.6.0",
    "black>=24.0.0",
    "mypy>=1.11.0",
    "bandit>=1.7.0",
    "vulture>=2.11",
    "pre-commit>=3.7.0",
    "ipython>=8.20.0",
    "ipdb>=0.13.13",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
learning-agent = "learning_agent.cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/learning_agent"]

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate
    "N",    # pep8-naming
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without strict parameter
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101", "ERA"]
"__init__.py" = ["F401"]
"src/learning_agent/learning/execution_analyzer.py" = ["PERF401"]

[tool.ruff.lint.isort]
known-first-party = ["learning_agent"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
strict = false
warn_return_any = false
warn_unused_configs = true
no_implicit_reexport = false
namespace_packages = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Allow certain patterns during development
allow_untyped_calls = true
allow_untyped_defs = true
allow_incomplete_defs = true
allow_untyped_decorators = true
check_untyped_defs = false
ignore_errors = false

# Ignore errors in provider files with complex typing
[[tool.mypy.overrides]]
module = [
    "learning_agent.providers.llm_factory",
    "learning_agent.providers.embedding_factory",
    "learning_agent.config",  # BaseSettings typing varies between environments
    "learning_agent.learning.narrative_learner",  # Complex LangChain types
    "learning_agent.learning.background_learner",  # Queue typing issues
]
ignore_errors = true

# Ignore missing imports for certain libraries
[[tool.mypy.overrides]]
module = [
    "deepagents.*",
    "langmem.*",
    "langgraph.*",
    "langchain.*",
    "langchain_core.*",
    "langchain_openai.*",
    "langchain_anthropic.*",
    "langchain_community.*",
    "langchain_cohere.*",
    "langchain_huggingface.*",
    "langchain_ollama.*",
    "langchain_google_genai.*",
    "langchain_mistralai.*",
    "langchain_groq.*",
    "langchain_together.*",
    "langchain_fireworks.*",
    "langchain_voyageai.*",
    "learning_agent.ui.terminal",
    "asyncpg",
    "asyncpg.*",
    "numpy",
    "pgvector.*",
    "fastapi",
    "fastapi.*",
    "uvicorn",
    "typer",
    "rich.*",
    "dotenv",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src/learning_agent"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "langgraph-cli[inmem]>=0.3.8",
]
