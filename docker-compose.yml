services:
  # PostgreSQL with pgvector for learning memory storage
  postgres:
    image: pgvector/pgvector:pg16
    container_name: learning-agent-db
    environment:
      POSTGRES_USER: learning_agent
      POSTGRES_PASSWORD: learning_agent_pass
      POSTGRES_DB: learning_memories
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - learning-agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U learning_agent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Standalone LangGraph server for the learning agent (in-process ASGI app)
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: learning-agent-server
    ports:
      - "2024:2024"
    shm_size: 1gb
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_TRACING=true
      - LANGSMITH_PROJECT=learning-agent
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - LLM_MODEL=${LLM_MODEL:-gpt-4o-mini}
      - DATABASE_URL=postgresql://learning_agent:learning_agent_pass@postgres:5432/learning_memories
      - DATABASE_URI=postgresql://learning_agent:learning_agent_pass@postgres:5432/learning_memories
      - LANGGRAPH_RUNTIME_EDITION=inmem
      - REDIS_URI=memory://
      - BG_JOB_ISOLATED_LOOPS=true
      - BROWSER_HEADLESS=${BROWSER_HEADLESS:-true}
      - BROWSER_ALLOWED_DOMAINS=${BROWSER_ALLOWED_DOMAINS:-}
      - BROWSER_CDP_URL=${BROWSER_CDP_URL:-}
      - BROWSER_KEEP_ALIVE=${BROWSER_KEEP_ALIVE:-false}
      - BROWSER_MIN_WAIT=${BROWSER_MIN_WAIT:-0.25}
      - BROWSER_WAIT_BETWEEN=${BROWSER_WAIT_BETWEEN:-0.5}
      - BROWSER_VIEWPORT_WIDTH=${BROWSER_VIEWPORT_WIDTH:-1280}
      - BROWSER_VIEWPORT_HEIGHT=${BROWSER_VIEWPORT_HEIGHT:-720}
    volumes:
      - ./.agent:/app/.agent
      - playwright_cache:/root/.cache/ms-playwright
    networks:
      - learning-agent-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2024/ok"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Deep Agents UI
  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: learning-agent-ui
    ports:
      - "10300:3000"
    environment:
      - NEXT_PUBLIC_DEPLOYMENT_URL=http://localhost:2024
      - NEXT_PUBLIC_AGENT_ID=learning_agent
      - NEXT_PUBLIC_LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - INTERNAL_API_BASE=http://server:8001
    depends_on:
      - server
    networks:
      - learning-agent-network

  # Test runner service
  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: learning-agent-test
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_TRACING=false
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - LLM_MODEL=${LLM_MODEL:-gpt-4o-mini}
      - DATABASE_URL=postgresql://learning_agent:learning_agent_pass@postgres:5432/learning_memories
      - PYTEST_ADDOPTS=-v --tb=short --color=yes
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./.agent:/app/.agent
    networks:
      - learning-agent-network
    depends_on:
      postgres:
        condition: service_healthy
      server:
        condition: service_healthy

  # UI End-to-end tests using Microsoft Playwright container
  ui-test:
    profiles: ["test"]
    image: mcr.microsoft/playwright:v1.47.0-jammy
    container_name: learning-agent-ui-test
    working_dir: /app/ui
    entrypoint: ["/bin/bash", "-lc"]
    command: >
      "npm ci && npx playwright install chromium && npx playwright test --reporter=list"
    environment:
      - NEXT_PUBLIC_DEPLOYMENT_URL=http://server:2024
      - NEXT_PUBLIC_AGENT_ID=learning_agent
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CI=true
    volumes:
      - ./ui:/app/ui
    depends_on:
      ui:
        condition: service_started
      server:
        condition: service_healthy
    networks:
      - learning-agent-network

networks:
  learning-agent-network:
    driver: bridge

volumes:
  agent-data:
  postgres_data:
  playwright_cache:
